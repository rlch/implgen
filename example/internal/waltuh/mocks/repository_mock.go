// Code generated by MockGen. DO NOT EDIT.
// Source: api/waltuh/repository.go
//
// Generated by this command:
//
//	mockgen -source=api/waltuh/repository.go -destination=internal/waltuh/mocks/repository_mock.go
//

// Package mock_waltuh is a generated GoMock package.
package mock_waltuh

import (
	context "context"
	reflect "reflect"

	waltuh "example/api/waltuh"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DropWaltJrOffAtSchool mocks base method.
func (m *MockRepository) DropWaltJrOffAtSchool(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropWaltJrOffAtSchool", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropWaltJrOffAtSchool indicates an expected call of DropWaltJrOffAtSchool.
func (mr *MockRepositoryMockRecorder) DropWaltJrOffAtSchool(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropWaltJrOffAtSchool", reflect.TypeOf((*MockRepository)(nil).DropWaltJrOffAtSchool), ctx)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// KillKrazy8 mocks base method.
func (m *MockRepository) KillKrazy8(ctx context.Context, missingPlateShards int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillKrazy8", ctx, missingPlateShards)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillKrazy8 indicates an expected call of KillKrazy8.
func (mr *MockRepositoryMockRecorder) KillKrazy8(ctx, missingPlateShards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillKrazy8", reflect.TypeOf((*MockRepository)(nil).KillKrazy8), ctx, missingPlateShards)
}

// MakeBreakfast mocks base method.
func (m *MockRepository) MakeBreakfast(birthday, kilograms int) waltuh.Waltuh {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBreakfast", birthday, kilograms)
	ret0, _ := ret[0].(waltuh.Waltuh)
	return ret0
}

// MakeBreakfast indicates an expected call of MakeBreakfast.
func (mr *MockRepositoryMockRecorder) MakeBreakfast(birthday, kilograms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBreakfast", reflect.TypeOf((*MockRepository)(nil).MakeBreakfast), birthday, kilograms)
}

// MakeMoney mocks base method.
func (m *MockRepository) MakeMoney(ctx context.Context, poundsOfMeth int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeMoney", ctx, poundsOfMeth)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeMoney indicates an expected call of MakeMoney.
func (mr *MockRepositoryMockRecorder) MakeMoney(ctx, poundsOfMeth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeMoney", reflect.TypeOf((*MockRepository)(nil).MakeMoney), ctx, poundsOfMeth)
}

// Nope mocks base method.
func (m *MockRepository) Nope() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Nope")
}

// Nope indicates an expected call of Nope.
func (mr *MockRepositoryMockRecorder) Nope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nope", reflect.TypeOf((*MockRepository)(nil).Nope))
}

// SynthesizeMeth mocks base method.
func (m *MockRepository) SynthesizeMeth(ctx context.Context, flyPresent, withJesse bool) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynthesizeMeth", ctx, flyPresent, withJesse)
	ret0, _ := ret[0].(int)
	return ret0
}

// SynthesizeMeth indicates an expected call of SynthesizeMeth.
func (mr *MockRepositoryMockRecorder) SynthesizeMeth(ctx, flyPresent, withJesse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynthesizeMeth", reflect.TypeOf((*MockRepository)(nil).SynthesizeMeth), ctx, flyPresent, withJesse)
}

// MockBRepository is a mock of BRepository interface.
type MockBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBRepositoryMockRecorder
}

// MockBRepositoryMockRecorder is the mock recorder for MockBRepository.
type MockBRepositoryMockRecorder struct {
	mock *MockBRepository
}

// NewMockBRepository creates a new mock instance.
func NewMockBRepository(ctrl *gomock.Controller) *MockBRepository {
	mock := &MockBRepository{ctrl: ctrl}
	mock.recorder = &MockBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBRepository) EXPECT() *MockBRepositoryMockRecorder {
	return m.recorder
}

// Yep mocks base method.
func (m *MockBRepository) Yep(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Yep", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Yep indicates an expected call of Yep.
func (mr *MockBRepositoryMockRecorder) Yep(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Yep", reflect.TypeOf((*MockBRepository)(nil).Yep), ctx, id)
}

// Yope mocks base method.
func (m *MockBRepository) Yope() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Yope")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Yope indicates an expected call of Yope.
func (mr *MockBRepositoryMockRecorder) Yope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Yope", reflect.TypeOf((*MockBRepository)(nil).Yope))
}
