// Code generated by MockGen. DO NOT EDIT.
// Source: api/waltuh/another.go
//
// Generated by this command:
//
//	mockgen -source=api/waltuh/another.go -destination=internal/waltuh/mocks/another.go
//

// Package mock_waltuh is a generated GoMock package.
package mock_waltuh

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAnotherRepository is a mock of AnotherRepository interface.
type MockAnotherRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnotherRepositoryMockRecorder
}

// MockAnotherRepositoryMockRecorder is the mock recorder for MockAnotherRepository.
type MockAnotherRepositoryMockRecorder struct {
	mock *MockAnotherRepository
}

// NewMockAnotherRepository creates a new mock instance.
func NewMockAnotherRepository(ctrl *gomock.Controller) *MockAnotherRepository {
	mock := &MockAnotherRepository{ctrl: ctrl}
	mock.recorder = &MockAnotherRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnotherRepository) EXPECT() *MockAnotherRepositoryMockRecorder {
	return m.recorder
}

// A mocks base method.
func (m *MockAnotherRepository) A() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "A")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// A indicates an expected call of A.
func (mr *MockAnotherRepositoryMockRecorder) A() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "A", reflect.TypeOf((*MockAnotherRepository)(nil).A))
}

// B mocks base method.
func (m *MockAnotherRepository) B(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "B", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// B indicates an expected call of B.
func (mr *MockAnotherRepositoryMockRecorder) B(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "B", reflect.TypeOf((*MockAnotherRepository)(nil).B), ctx)
}
